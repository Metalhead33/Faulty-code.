#include <iostream>
#include <string>
#include <map>
using namespace std;

struct attrib
{
    int atr_str;
    int atr_int;
    int atr_wlp;
    int atr_agl;
    int atr_dxt;
    int atr_chr;
};

enum wpn_slot
{
    eq_wpn_dummy = 0,
    eq_wpn1,
    eq_wpn2
};

enum armour_slot
{
    eq_arm_dummy = 0,
    eq_shld,
    eq_hlm,
    eq_clth1,
    eq_clth2,
    eq_ndrwr,
    eq_arm_tors,
    eq_arm_lgs,
    eq_boots,
    eq_ggntlet,
    eq_clk,
    eq_arrow,
    eq_neck
};

enum w_type
{
        blunt,
        ranged,
        piercing,
        slashing
};

enum a_type
{
    t_none,
    cloth,
    light_armour,
    heavy_armour
};

enum element
{
    m_none,
    m_fire,
    m_water,
    m_ice,
    m_air,
    m_thunder,
    m_earth,
    m_light,
    m_dark
};

enum material
{
    a_none,
    a_wood,
    a_iron,
    a_steel,
    a_dwarven,
    a_leather
};

class wpn{
private:
    string w_display_name;
    float w_minatk;
    float w_maxatk;
    float w_cond;
    float w_cost;
    material w_mat;
    element w_elem;
    w_type w_usage;
public:
    wpn(string w_setname, int w_setmin, int w_setmax, int w_setcond, int w_setcost, material w_setmat, element w_setelem, w_type w_settype)
        {
        w_display_name = w_setname;
        w_minatk = w_setmin;
        w_maxatk = w_setmax;
        w_cond = w_setcond;
        w_cost = w_setcost;
        w_mat = w_setmat;
        w_elem = w_setelem;
        w_usage = w_settype;
        };
    static wpn GetNull()
    {
        wpn *res = new wpn("N\\A",0, 0, 0, 0, a_none, m_none, blunt);
        return *res;
     };
    string GetW_display_name() { return w_display_name; }
    float GetW_minatk() { return w_minatk; }
    float GetW_maxatk() { return w_maxatk; }
    float GetW_cond() { return w_cond; }
    float GetW_cost() { return w_cost; }
    material GetW_mat() { return w_mat; }
    element GetW_elem() { return w_elem; }
    w_type getW_usage() { return w_usage; }
};


class armour{
private:
    string a_display_name;
    float a_defense;
    float a_cond;
    float a_cost;
    material a_mat;
    element a_elem;
    a_type a_wearer;
public:
    armour(string a_setname, int a_setvalue, int a_setcond, int a_setcost, material a_setmat, element a_setelem, a_type a_settype)
        {
        a_display_name = a_setname;
        a_defense = a_setvalue;
        a_cond = a_setcond;
        a_cost = a_setcost;
        a_mat = a_setmat;
        a_elem = a_setelem;
        a_wearer = a_settype;
        }
    static armour GetNull()
    {
    armour *res = new armour("N\\A",0,0,0,a_none,m_none,t_none);
    return *res;
    };
    string GetA_display_name() { return a_display_name; }
    float GetA_defense() { return a_defense; }
    float GetA_cond() { return a_cond; }
    float GetA_cost() { return a_cost; }
    material GetA_mat() { return a_mat; }
    element GetA_elem() { return a_elem; }
    a_type getA_wearer() { return a_wearer; }
};


enum sex
{
        male,
        female
};

class race1
{
private:
    string r1_display_name;
    attrib r_max;
    attrib r_min;
public:
    race1(string setname, int min_atr_str, int max_atr_str, int min_atr_int, int max_atr_int, int min_atr_wlp, int max_atr_wlp, int min_atr_agl, int max_atr_agl, int min_atr_dxt, int max_atr_dxt, int min_atr_chr, int max_atr_chr)
    {
        r1_display_name = setname;
        r_min.atr_str = min_atr_str;
        r_max.atr_str = max_atr_str;
        r_min.atr_int = min_atr_int;
        r_max.atr_int = max_atr_int;
        r_min.atr_wlp = min_atr_wlp;
        r_max.atr_wlp = max_atr_wlp;
        r_min.atr_agl = min_atr_agl;
        r_max.atr_agl = max_atr_agl;
        r_min.atr_dxt = min_atr_dxt;
        r_max.atr_dxt = max_atr_dxt;
        r_min.atr_chr = min_atr_chr;
        r_max.atr_chr = max_atr_chr;
    };
    static race1 GetNull()
    {
        string setname = "None";
        int min_atr_str = 0;
        int max_atr_str = 0;
        int min_atr_int = 0;
        int max_atr_int = 0;
        int min_atr_wlp = 0;
        int max_atr_wlp = 0;
        int min_atr_agl = 0;
        int max_atr_agl = 0;
        int min_atr_dxt = 0;
        int max_atr_dxt = 0;
        int min_atr_chr = 0;
        int max_atr_chr = 0;
    };
    int get_min_str() {return r_min.atr_str; }
	void set_min_str(int set_min_atset_str) { r_min.atr_str = set_min_atset_str; }
	int get_max_str() {return r_max.atr_str; }
	void set_max_str(int set_max_atset_str) { r_max.atr_str = set_max_atset_str; }
	int get_min_int() {return r_min.atr_int; }
	void set_min_int(int set_min_atset_int) { r_min.atr_int = set_min_atset_int; }
	int get_max_int() {return r_max.atr_int; }
	void set_max_int(int set_max_atset_int) { r_max.atr_int = set_max_atset_int; }
	int get_min_wlp() {return r_min.atr_wlp; }
	void set_min_wlp(int set_min_atset_wlp) { r_min.atr_wlp = set_min_atset_wlp; }
	int get_max_wlp() {return r_max.atr_wlp; }
	void set_max_wlp(int set_max_atset_wlp) { r_max.atr_wlp = set_max_atset_wlp; }
	int get_min_agl() {return r_min.atr_agl; }
	void set_min_agl(int set_min_atset_agl) { r_min.atr_agl = set_min_atset_agl; }
	int get_max_agl() {return r_max.atr_agl; }
	void set_max_agl(int set_max_atset_agl) { r_max.atr_agl = set_max_atset_agl; }
	int get_min_dxt() {return r_min.atr_dxt; }
	void set_min_dxt(int set_min_atset_dxt) { r_min.atr_dxt = set_min_atset_dxt; }
	int get_max_dxt() {return r_max.atr_dxt; }
	void set_max_dxt(int set_max_atset_dxt) { r_max.atr_dxt = set_max_atset_dxt; }
	int get_min_chr() {return r_min.atr_chr; }
	void set_min_chr(int set_min_atset_chr) { r_min.atr_chr = set_min_atset_chr; }
	int get_max_chr() {return r_max.atr_chr; }
	void set_max_chr(int set_max_atset_chr) { r_max.atr_chr = set_max_atset_chr; }
};

const race1 r_human("Human", 8, 18, 8, 18, 8, 18, 8, 18, 8, 18, 8, 18);
const race1 r_wood_elf("Wood Elf", 7, 17, 9, 19, 9, 19, 9, 19, 8, 18, 7, 17);
const race1 r_high_elf("High Elf", 7, 17, 8, 18, 9, 19, 9, 19, 8, 18, 7, 17);
const race1 r_dark_elf("Dark Elf", 7, 17, 8, 18, 8, 18, 9, 19, 9, 19, 7, 17);
const race1 r_orc("Orc", 10, 20, 8, 18, 7, 17, 9, 19, 7, 17, 7, 17);
const race1 r_dwarf("Dwarf", 10, 20, 8, 18, 8, 18, 6, 16, 8, 18, 8, 18);
const race1 r_gnome("Gnome", 7, 17, 9, 19, 9, 19, 6, 16, 9, 19, 8, 18);
const race1 r_halfling("Halfling", 7, 17, 8, 18, 8, 18, 9, 19, 7, 17, 9, 19);
const race1 r_lizardman("Lizardman", 9, 19, 9, 19, 8, 18, 9, 19, 7, 17, 6, 16);
const race1 r_ogre("Ogre", 12, 22, 7, 17, 7, 17, 9, 19, 7, 17, 6, 16);
const race1 r_goblin("Goblin", 9, 19, 8, 18, 7, 17, 9, 19, 9, 19, 7, 17);

enum race2
{
        r_none,
        r_vampire,
        r_lich,
        r_werewolf,
        r_werelion,
        r_werebear,
        r_wereboar,
        r_weretiger,
        r_wererat
};

enum char_class
{
        c_none,
        c_druid,
        c_priest,
        c_magician,
        c_warrior
};

enum pclass
{
        pc_none,
        pc_knight,
        pc_dknight,
        pc_ranger,
        pc_assassin,
        pc_inquisitor,
        pc_necromancer,
        pc_headhunter
};


// Commented out, because of its refusal to work.
// I can not find any way to store references to objects.
// I tried maps, and they produced errors.
// I tried blocks, they did not work either.
class inventory{
public:
    wpn char_wpn[eq_wpn2];
    armour char_armour[eq_neck];
    inventory(){
        char_wpn[eq_wpn1] = wpn::GetNull();
        char_wpn[eq_wpn2] = wpn::GetNull();
        char_armour[eq_shld] = armour::GetNull();
        char_armour[eq_hlm] = armour::GetNull();
        char_armour[eq_clth1] = armour::GetNull();
        char_armour[eq_clth2] = armour::GetNull();
        char_armour[eq_ndrwr] = armour::GetNull();
        char_armour[eq_arm_tors] = armour::GetNull();
        char_armour[eq_arm_lgs] = armour::GetNull();
        char_armour[eq_boots] = armour::GetNull();
        char_armour[eq_ggntlet] = armour::GetNull();
        char_armour[eq_clk] = armour::GetNull();
        char_armour[eq_arrow] = armour::GetNull();
        char_armour[eq_neck] = armour::GetNull();
        };
};


class chr{
private:
    string display_name;
    race2 sec_race;
    char_class class1;
    char_class class2;
    pclass prestige_class;
    int lvl;
    attrib base_attrib;
    attrib mod_attrib;
    bool alive;
    string state[30];
    float mhp;
    float chp;
    float mmp;
    float cmp;
    float hp_lvl;
    float mp_lvl;
    float msta;
    float csta;
    float sta_lvl;
public:
    race1 *race;
    chr(string setname, race2 setrace2, char_class setclass1, char_class setclass2, pclass setpclass, int setlvl)
    {
    display_name = setname;
    sec_race = setrace2;
    class1 = setclass1;
    class2 = setclass2;
    prestige_class = setpclass;
    lvl = setlvl;
    alive = true;
    mhp = 0.00;
    chp = 0.00;
    mmp = 0.00;
    cmp = 0.00;
    hp_lvl = 0.00;
    mp_lvl = 0.00;
    msta = 0.00;
    csta = 0.00;
    sta_lvl = 0.00;
    };
    string GetName() { return display_name; }
    void set_name(string set_name) { display_name = set_name; }
    race2 getrace2() { return sec_race; }
    void set_race2(race2 setrace2) { sec_race = setrace2; }
    char_class getclass1() { return class1; }
    void set_class1(char_class setclass1) { class1 = setclass1; }
    char_class getclass2() { return class2; }
    void set_class2(char_class setclass2) { class2 = setclass2; }
    pclass getpclass() { return prestige_class; }
    void set_pclass(pclass setpclass) { prestige_class = setpclass; }
    int getlvl() { return lvl; }
    void set_lvl(int setlvl) { lvl = setlvl; }
    bool get_alive() { return alive; }
    void rfr_alive()
    {
    if (chp <= 0.00)
        alive = false;
    else
        alive = true; }
    float get_mhp() { return mhp; }
    void set_mhp(float setmhp) { mhp = setmhp; }
    float get_chp() { return chp; }
    void set_chp(float setchp) { chp = setchp; }
    float get_mmp() { return mmp; }
    void set_mmp(float setmmp) { mmp = setmmp; }
    float get_cmp() { return cmp; }
    void set_cmp(float setcmp) { cmp = setcmp; }
    float get_hp_lvl() { return hp_lvl; }
    void set_hp_lvl(float sethp_lvl) { hp_lvl = sethp_lvl; }
    float get_mp_lvl() { return mp_lvl; }
    void set_mp_lvl(float setmp_lvl) { mp_lvl = setmp_lvl; }
    float get_msta() { return msta; }
    void set_msta(float setmsta) { msta = setmsta; }
    float get_csta() { return csta; }
    void set_csta(float setcsta) { msta = setcsta; }
    float get_sta_lvl() { return sta_lvl; }
    void set_sta_lvl(float setsta_lvl) { sta_lvl = setsta_lvl; }
};

int main()
{
    wpn iron_sword("Iron Sword", 1, 8, 100, 75, a_iron, m_none, slashing);
    chr stefanus_tavilrond("Stephanus Tavilrond", r_none, c_warrior, c_priest, pc_knight, 1);
    cout << "damnit" << endl;
    return 0;
}
